
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SaleItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SaleItem
 * 
 */
export type SaleItemModel = runtime.Types.Result.DefaultSelection<Prisma.$SaleItemPayload>

export type AggregateSaleItem = {
  _count: SaleItemCountAggregateOutputType | null
  _avg: SaleItemAvgAggregateOutputType | null
  _sum: SaleItemSumAggregateOutputType | null
  _min: SaleItemMinAggregateOutputType | null
  _max: SaleItemMaxAggregateOutputType | null
}

export type SaleItemAvgAggregateOutputType = {
  quantity: runtime.Decimal | null
  pricePerUnit: runtime.Decimal | null
  subtotal: runtime.Decimal | null
}

export type SaleItemSumAggregateOutputType = {
  quantity: runtime.Decimal | null
  pricePerUnit: runtime.Decimal | null
  subtotal: runtime.Decimal | null
}

export type SaleItemMinAggregateOutputType = {
  id: string | null
  quantity: runtime.Decimal | null
  pricePerUnit: runtime.Decimal | null
  subtotal: runtime.Decimal | null
  saleId: string | null
  productId: string | null
}

export type SaleItemMaxAggregateOutputType = {
  id: string | null
  quantity: runtime.Decimal | null
  pricePerUnit: runtime.Decimal | null
  subtotal: runtime.Decimal | null
  saleId: string | null
  productId: string | null
}

export type SaleItemCountAggregateOutputType = {
  id: number
  quantity: number
  pricePerUnit: number
  subtotal: number
  saleId: number
  productId: number
  _all: number
}


export type SaleItemAvgAggregateInputType = {
  quantity?: true
  pricePerUnit?: true
  subtotal?: true
}

export type SaleItemSumAggregateInputType = {
  quantity?: true
  pricePerUnit?: true
  subtotal?: true
}

export type SaleItemMinAggregateInputType = {
  id?: true
  quantity?: true
  pricePerUnit?: true
  subtotal?: true
  saleId?: true
  productId?: true
}

export type SaleItemMaxAggregateInputType = {
  id?: true
  quantity?: true
  pricePerUnit?: true
  subtotal?: true
  saleId?: true
  productId?: true
}

export type SaleItemCountAggregateInputType = {
  id?: true
  quantity?: true
  pricePerUnit?: true
  subtotal?: true
  saleId?: true
  productId?: true
  _all?: true
}

export type SaleItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SaleItem to aggregate.
   */
  where?: Prisma.SaleItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleItems to fetch.
   */
  orderBy?: Prisma.SaleItemOrderByWithRelationInput | Prisma.SaleItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SaleItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SaleItems
  **/
  _count?: true | SaleItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SaleItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SaleItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SaleItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SaleItemMaxAggregateInputType
}

export type GetSaleItemAggregateType<T extends SaleItemAggregateArgs> = {
      [P in keyof T & keyof AggregateSaleItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSaleItem[P]>
    : Prisma.GetScalarType<T[P], AggregateSaleItem[P]>
}




export type SaleItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SaleItemWhereInput
  orderBy?: Prisma.SaleItemOrderByWithAggregationInput | Prisma.SaleItemOrderByWithAggregationInput[]
  by: Prisma.SaleItemScalarFieldEnum[] | Prisma.SaleItemScalarFieldEnum
  having?: Prisma.SaleItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SaleItemCountAggregateInputType | true
  _avg?: SaleItemAvgAggregateInputType
  _sum?: SaleItemSumAggregateInputType
  _min?: SaleItemMinAggregateInputType
  _max?: SaleItemMaxAggregateInputType
}

export type SaleItemGroupByOutputType = {
  id: string
  quantity: runtime.Decimal
  pricePerUnit: runtime.Decimal
  subtotal: runtime.Decimal
  saleId: string
  productId: string
  _count: SaleItemCountAggregateOutputType | null
  _avg: SaleItemAvgAggregateOutputType | null
  _sum: SaleItemSumAggregateOutputType | null
  _min: SaleItemMinAggregateOutputType | null
  _max: SaleItemMaxAggregateOutputType | null
}

type GetSaleItemGroupByPayload<T extends SaleItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SaleItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SaleItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SaleItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SaleItemGroupByOutputType[P]>
      }
    >
  >



export type SaleItemWhereInput = {
  AND?: Prisma.SaleItemWhereInput | Prisma.SaleItemWhereInput[]
  OR?: Prisma.SaleItemWhereInput[]
  NOT?: Prisma.SaleItemWhereInput | Prisma.SaleItemWhereInput[]
  id?: Prisma.StringFilter<"SaleItem"> | string
  quantity?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringFilter<"SaleItem"> | string
  productId?: Prisma.StringFilter<"SaleItem"> | string
  sale?: Prisma.XOR<Prisma.SaleScalarRelationFilter, Prisma.SaleWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type SaleItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  pricePerUnit?: Prisma.SortOrder
  subtotal?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  sale?: Prisma.SaleOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
}

export type SaleItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SaleItemWhereInput | Prisma.SaleItemWhereInput[]
  OR?: Prisma.SaleItemWhereInput[]
  NOT?: Prisma.SaleItemWhereInput | Prisma.SaleItemWhereInput[]
  quantity?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringFilter<"SaleItem"> | string
  productId?: Prisma.StringFilter<"SaleItem"> | string
  sale?: Prisma.XOR<Prisma.SaleScalarRelationFilter, Prisma.SaleWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type SaleItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  pricePerUnit?: Prisma.SortOrder
  subtotal?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  _count?: Prisma.SaleItemCountOrderByAggregateInput
  _avg?: Prisma.SaleItemAvgOrderByAggregateInput
  _max?: Prisma.SaleItemMaxOrderByAggregateInput
  _min?: Prisma.SaleItemMinOrderByAggregateInput
  _sum?: Prisma.SaleItemSumOrderByAggregateInput
}

export type SaleItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.SaleItemScalarWhereWithAggregatesInput | Prisma.SaleItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.SaleItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SaleItemScalarWhereWithAggregatesInput | Prisma.SaleItemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SaleItem"> | string
  quantity?: Prisma.DecimalWithAggregatesFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalWithAggregatesFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalWithAggregatesFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringWithAggregatesFilter<"SaleItem"> | string
  productId?: Prisma.StringWithAggregatesFilter<"SaleItem"> | string
}

export type SaleItemCreateInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  sale: Prisma.SaleCreateNestedOneWithoutItemsInput
  product: Prisma.ProductCreateNestedOneWithoutSaleItemsInput
}

export type SaleItemUncheckedCreateInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId: string
  productId: string
}

export type SaleItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale?: Prisma.SaleUpdateOneRequiredWithoutItemsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutSaleItemsNestedInput
}

export type SaleItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SaleItemCreateManyInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId: string
  productId: string
}

export type SaleItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type SaleItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SaleItemListRelationFilter = {
  every?: Prisma.SaleItemWhereInput
  some?: Prisma.SaleItemWhereInput
  none?: Prisma.SaleItemWhereInput
}

export type SaleItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SaleItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  pricePerUnit?: Prisma.SortOrder
  subtotal?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type SaleItemAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  pricePerUnit?: Prisma.SortOrder
  subtotal?: Prisma.SortOrder
}

export type SaleItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  pricePerUnit?: Prisma.SortOrder
  subtotal?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type SaleItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  pricePerUnit?: Prisma.SortOrder
  subtotal?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type SaleItemSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  pricePerUnit?: Prisma.SortOrder
  subtotal?: Prisma.SortOrder
}

export type SaleItemCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutProductInput, Prisma.SaleItemUncheckedCreateWithoutProductInput> | Prisma.SaleItemCreateWithoutProductInput[] | Prisma.SaleItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutProductInput | Prisma.SaleItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.SaleItemCreateManyProductInputEnvelope
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
}

export type SaleItemUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutProductInput, Prisma.SaleItemUncheckedCreateWithoutProductInput> | Prisma.SaleItemCreateWithoutProductInput[] | Prisma.SaleItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutProductInput | Prisma.SaleItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.SaleItemCreateManyProductInputEnvelope
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
}

export type SaleItemUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutProductInput, Prisma.SaleItemUncheckedCreateWithoutProductInput> | Prisma.SaleItemCreateWithoutProductInput[] | Prisma.SaleItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutProductInput | Prisma.SaleItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.SaleItemUpsertWithWhereUniqueWithoutProductInput | Prisma.SaleItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.SaleItemCreateManyProductInputEnvelope
  set?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  disconnect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  delete?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  update?: Prisma.SaleItemUpdateWithWhereUniqueWithoutProductInput | Prisma.SaleItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.SaleItemUpdateManyWithWhereWithoutProductInput | Prisma.SaleItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.SaleItemScalarWhereInput | Prisma.SaleItemScalarWhereInput[]
}

export type SaleItemUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutProductInput, Prisma.SaleItemUncheckedCreateWithoutProductInput> | Prisma.SaleItemCreateWithoutProductInput[] | Prisma.SaleItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutProductInput | Prisma.SaleItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.SaleItemUpsertWithWhereUniqueWithoutProductInput | Prisma.SaleItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.SaleItemCreateManyProductInputEnvelope
  set?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  disconnect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  delete?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  update?: Prisma.SaleItemUpdateWithWhereUniqueWithoutProductInput | Prisma.SaleItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.SaleItemUpdateManyWithWhereWithoutProductInput | Prisma.SaleItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.SaleItemScalarWhereInput | Prisma.SaleItemScalarWhereInput[]
}

export type SaleItemCreateNestedManyWithoutSaleInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutSaleInput, Prisma.SaleItemUncheckedCreateWithoutSaleInput> | Prisma.SaleItemCreateWithoutSaleInput[] | Prisma.SaleItemUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutSaleInput | Prisma.SaleItemCreateOrConnectWithoutSaleInput[]
  createMany?: Prisma.SaleItemCreateManySaleInputEnvelope
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
}

export type SaleItemUncheckedCreateNestedManyWithoutSaleInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutSaleInput, Prisma.SaleItemUncheckedCreateWithoutSaleInput> | Prisma.SaleItemCreateWithoutSaleInput[] | Prisma.SaleItemUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutSaleInput | Prisma.SaleItemCreateOrConnectWithoutSaleInput[]
  createMany?: Prisma.SaleItemCreateManySaleInputEnvelope
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
}

export type SaleItemUpdateManyWithoutSaleNestedInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutSaleInput, Prisma.SaleItemUncheckedCreateWithoutSaleInput> | Prisma.SaleItemCreateWithoutSaleInput[] | Prisma.SaleItemUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutSaleInput | Prisma.SaleItemCreateOrConnectWithoutSaleInput[]
  upsert?: Prisma.SaleItemUpsertWithWhereUniqueWithoutSaleInput | Prisma.SaleItemUpsertWithWhereUniqueWithoutSaleInput[]
  createMany?: Prisma.SaleItemCreateManySaleInputEnvelope
  set?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  disconnect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  delete?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  update?: Prisma.SaleItemUpdateWithWhereUniqueWithoutSaleInput | Prisma.SaleItemUpdateWithWhereUniqueWithoutSaleInput[]
  updateMany?: Prisma.SaleItemUpdateManyWithWhereWithoutSaleInput | Prisma.SaleItemUpdateManyWithWhereWithoutSaleInput[]
  deleteMany?: Prisma.SaleItemScalarWhereInput | Prisma.SaleItemScalarWhereInput[]
}

export type SaleItemUncheckedUpdateManyWithoutSaleNestedInput = {
  create?: Prisma.XOR<Prisma.SaleItemCreateWithoutSaleInput, Prisma.SaleItemUncheckedCreateWithoutSaleInput> | Prisma.SaleItemCreateWithoutSaleInput[] | Prisma.SaleItemUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleItemCreateOrConnectWithoutSaleInput | Prisma.SaleItemCreateOrConnectWithoutSaleInput[]
  upsert?: Prisma.SaleItemUpsertWithWhereUniqueWithoutSaleInput | Prisma.SaleItemUpsertWithWhereUniqueWithoutSaleInput[]
  createMany?: Prisma.SaleItemCreateManySaleInputEnvelope
  set?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  disconnect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  delete?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  connect?: Prisma.SaleItemWhereUniqueInput | Prisma.SaleItemWhereUniqueInput[]
  update?: Prisma.SaleItemUpdateWithWhereUniqueWithoutSaleInput | Prisma.SaleItemUpdateWithWhereUniqueWithoutSaleInput[]
  updateMany?: Prisma.SaleItemUpdateManyWithWhereWithoutSaleInput | Prisma.SaleItemUpdateManyWithWhereWithoutSaleInput[]
  deleteMany?: Prisma.SaleItemScalarWhereInput | Prisma.SaleItemScalarWhereInput[]
}

export type SaleItemCreateWithoutProductInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  sale: Prisma.SaleCreateNestedOneWithoutItemsInput
}

export type SaleItemUncheckedCreateWithoutProductInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId: string
}

export type SaleItemCreateOrConnectWithoutProductInput = {
  where: Prisma.SaleItemWhereUniqueInput
  create: Prisma.XOR<Prisma.SaleItemCreateWithoutProductInput, Prisma.SaleItemUncheckedCreateWithoutProductInput>
}

export type SaleItemCreateManyProductInputEnvelope = {
  data: Prisma.SaleItemCreateManyProductInput | Prisma.SaleItemCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type SaleItemUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.SaleItemWhereUniqueInput
  update: Prisma.XOR<Prisma.SaleItemUpdateWithoutProductInput, Prisma.SaleItemUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.SaleItemCreateWithoutProductInput, Prisma.SaleItemUncheckedCreateWithoutProductInput>
}

export type SaleItemUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.SaleItemWhereUniqueInput
  data: Prisma.XOR<Prisma.SaleItemUpdateWithoutProductInput, Prisma.SaleItemUncheckedUpdateWithoutProductInput>
}

export type SaleItemUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.SaleItemScalarWhereInput
  data: Prisma.XOR<Prisma.SaleItemUpdateManyMutationInput, Prisma.SaleItemUncheckedUpdateManyWithoutProductInput>
}

export type SaleItemScalarWhereInput = {
  AND?: Prisma.SaleItemScalarWhereInput | Prisma.SaleItemScalarWhereInput[]
  OR?: Prisma.SaleItemScalarWhereInput[]
  NOT?: Prisma.SaleItemScalarWhereInput | Prisma.SaleItemScalarWhereInput[]
  id?: Prisma.StringFilter<"SaleItem"> | string
  quantity?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFilter<"SaleItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringFilter<"SaleItem"> | string
  productId?: Prisma.StringFilter<"SaleItem"> | string
}

export type SaleItemCreateWithoutSaleInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  product: Prisma.ProductCreateNestedOneWithoutSaleItemsInput
}

export type SaleItemUncheckedCreateWithoutSaleInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  productId: string
}

export type SaleItemCreateOrConnectWithoutSaleInput = {
  where: Prisma.SaleItemWhereUniqueInput
  create: Prisma.XOR<Prisma.SaleItemCreateWithoutSaleInput, Prisma.SaleItemUncheckedCreateWithoutSaleInput>
}

export type SaleItemCreateManySaleInputEnvelope = {
  data: Prisma.SaleItemCreateManySaleInput | Prisma.SaleItemCreateManySaleInput[]
  skipDuplicates?: boolean
}

export type SaleItemUpsertWithWhereUniqueWithoutSaleInput = {
  where: Prisma.SaleItemWhereUniqueInput
  update: Prisma.XOR<Prisma.SaleItemUpdateWithoutSaleInput, Prisma.SaleItemUncheckedUpdateWithoutSaleInput>
  create: Prisma.XOR<Prisma.SaleItemCreateWithoutSaleInput, Prisma.SaleItemUncheckedCreateWithoutSaleInput>
}

export type SaleItemUpdateWithWhereUniqueWithoutSaleInput = {
  where: Prisma.SaleItemWhereUniqueInput
  data: Prisma.XOR<Prisma.SaleItemUpdateWithoutSaleInput, Prisma.SaleItemUncheckedUpdateWithoutSaleInput>
}

export type SaleItemUpdateManyWithWhereWithoutSaleInput = {
  where: Prisma.SaleItemScalarWhereInput
  data: Prisma.XOR<Prisma.SaleItemUpdateManyMutationInput, Prisma.SaleItemUncheckedUpdateManyWithoutSaleInput>
}

export type SaleItemCreateManyProductInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId: string
}

export type SaleItemUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale?: Prisma.SaleUpdateOneRequiredWithoutItemsNestedInput
}

export type SaleItemUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SaleItemUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SaleItemCreateManySaleInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit: runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal: runtime.Decimal | runtime.DecimalJsLike | number | string
  productId: string
}

export type SaleItemUpdateWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  product?: Prisma.ProductUpdateOneRequiredWithoutSaleItemsNestedInput
}

export type SaleItemUncheckedUpdateWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SaleItemUncheckedUpdateManyWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerUnit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  subtotal?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type SaleItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quantity?: boolean
  pricePerUnit?: boolean
  subtotal?: boolean
  saleId?: boolean
  productId?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["saleItem"]>

export type SaleItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quantity?: boolean
  pricePerUnit?: boolean
  subtotal?: boolean
  saleId?: boolean
  productId?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["saleItem"]>

export type SaleItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quantity?: boolean
  pricePerUnit?: boolean
  subtotal?: boolean
  saleId?: boolean
  productId?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["saleItem"]>

export type SaleItemSelectScalar = {
  id?: boolean
  quantity?: boolean
  pricePerUnit?: boolean
  subtotal?: boolean
  saleId?: boolean
  productId?: boolean
}

export type SaleItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "quantity" | "pricePerUnit" | "subtotal" | "saleId" | "productId", ExtArgs["result"]["saleItem"]>
export type SaleItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type SaleItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type SaleItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $SaleItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SaleItem"
  objects: {
    sale: Prisma.$SalePayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    quantity: runtime.Decimal
    pricePerUnit: runtime.Decimal
    subtotal: runtime.Decimal
    saleId: string
    productId: string
  }, ExtArgs["result"]["saleItem"]>
  composites: {}
}

export type SaleItemGetPayload<S extends boolean | null | undefined | SaleItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SaleItemPayload, S>

export type SaleItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SaleItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SaleItemCountAggregateInputType | true
  }

export interface SaleItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaleItem'], meta: { name: 'SaleItem' } }
  /**
   * Find zero or one SaleItem that matches the filter.
   * @param {SaleItemFindUniqueArgs} args - Arguments to find a SaleItem
   * @example
   * // Get one SaleItem
   * const saleItem = await prisma.saleItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SaleItemFindUniqueArgs>(args: Prisma.SelectSubset<T, SaleItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SaleItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SaleItemFindUniqueOrThrowArgs} args - Arguments to find a SaleItem
   * @example
   * // Get one SaleItem
   * const saleItem = await prisma.saleItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SaleItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SaleItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SaleItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleItemFindFirstArgs} args - Arguments to find a SaleItem
   * @example
   * // Get one SaleItem
   * const saleItem = await prisma.saleItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SaleItemFindFirstArgs>(args?: Prisma.SelectSubset<T, SaleItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SaleItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleItemFindFirstOrThrowArgs} args - Arguments to find a SaleItem
   * @example
   * // Get one SaleItem
   * const saleItem = await prisma.saleItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SaleItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SaleItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SaleItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SaleItems
   * const saleItems = await prisma.saleItem.findMany()
   * 
   * // Get first 10 SaleItems
   * const saleItems = await prisma.saleItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const saleItemWithIdOnly = await prisma.saleItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SaleItemFindManyArgs>(args?: Prisma.SelectSubset<T, SaleItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SaleItem.
   * @param {SaleItemCreateArgs} args - Arguments to create a SaleItem.
   * @example
   * // Create one SaleItem
   * const SaleItem = await prisma.saleItem.create({
   *   data: {
   *     // ... data to create a SaleItem
   *   }
   * })
   * 
   */
  create<T extends SaleItemCreateArgs>(args: Prisma.SelectSubset<T, SaleItemCreateArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SaleItems.
   * @param {SaleItemCreateManyArgs} args - Arguments to create many SaleItems.
   * @example
   * // Create many SaleItems
   * const saleItem = await prisma.saleItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SaleItemCreateManyArgs>(args?: Prisma.SelectSubset<T, SaleItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SaleItems and returns the data saved in the database.
   * @param {SaleItemCreateManyAndReturnArgs} args - Arguments to create many SaleItems.
   * @example
   * // Create many SaleItems
   * const saleItem = await prisma.saleItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SaleItems and only return the `id`
   * const saleItemWithIdOnly = await prisma.saleItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SaleItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SaleItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SaleItem.
   * @param {SaleItemDeleteArgs} args - Arguments to delete one SaleItem.
   * @example
   * // Delete one SaleItem
   * const SaleItem = await prisma.saleItem.delete({
   *   where: {
   *     // ... filter to delete one SaleItem
   *   }
   * })
   * 
   */
  delete<T extends SaleItemDeleteArgs>(args: Prisma.SelectSubset<T, SaleItemDeleteArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SaleItem.
   * @param {SaleItemUpdateArgs} args - Arguments to update one SaleItem.
   * @example
   * // Update one SaleItem
   * const saleItem = await prisma.saleItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SaleItemUpdateArgs>(args: Prisma.SelectSubset<T, SaleItemUpdateArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SaleItems.
   * @param {SaleItemDeleteManyArgs} args - Arguments to filter SaleItems to delete.
   * @example
   * // Delete a few SaleItems
   * const { count } = await prisma.saleItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SaleItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, SaleItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SaleItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SaleItems
   * const saleItem = await prisma.saleItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SaleItemUpdateManyArgs>(args: Prisma.SelectSubset<T, SaleItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SaleItems and returns the data updated in the database.
   * @param {SaleItemUpdateManyAndReturnArgs} args - Arguments to update many SaleItems.
   * @example
   * // Update many SaleItems
   * const saleItem = await prisma.saleItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SaleItems and only return the `id`
   * const saleItemWithIdOnly = await prisma.saleItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SaleItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SaleItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SaleItem.
   * @param {SaleItemUpsertArgs} args - Arguments to update or create a SaleItem.
   * @example
   * // Update or create a SaleItem
   * const saleItem = await prisma.saleItem.upsert({
   *   create: {
   *     // ... data to create a SaleItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SaleItem we want to update
   *   }
   * })
   */
  upsert<T extends SaleItemUpsertArgs>(args: Prisma.SelectSubset<T, SaleItemUpsertArgs<ExtArgs>>): Prisma.Prisma__SaleItemClient<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SaleItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleItemCountArgs} args - Arguments to filter SaleItems to count.
   * @example
   * // Count the number of SaleItems
   * const count = await prisma.saleItem.count({
   *   where: {
   *     // ... the filter for the SaleItems we want to count
   *   }
   * })
  **/
  count<T extends SaleItemCountArgs>(
    args?: Prisma.Subset<T, SaleItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SaleItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SaleItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SaleItemAggregateArgs>(args: Prisma.Subset<T, SaleItemAggregateArgs>): Prisma.PrismaPromise<GetSaleItemAggregateType<T>>

  /**
   * Group by SaleItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SaleItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SaleItemGroupByArgs['orderBy'] }
      : { orderBy?: SaleItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SaleItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SaleItem model
 */
readonly fields: SaleItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SaleItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SaleItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sale<T extends Prisma.SaleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SaleDefaultArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SaleItem model
 */
export interface SaleItemFieldRefs {
  readonly id: Prisma.FieldRef<"SaleItem", 'String'>
  readonly quantity: Prisma.FieldRef<"SaleItem", 'Decimal'>
  readonly pricePerUnit: Prisma.FieldRef<"SaleItem", 'Decimal'>
  readonly subtotal: Prisma.FieldRef<"SaleItem", 'Decimal'>
  readonly saleId: Prisma.FieldRef<"SaleItem", 'String'>
  readonly productId: Prisma.FieldRef<"SaleItem", 'String'>
}
    

// Custom InputTypes
/**
 * SaleItem findUnique
 */
export type SaleItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * Filter, which SaleItem to fetch.
   */
  where: Prisma.SaleItemWhereUniqueInput
}

/**
 * SaleItem findUniqueOrThrow
 */
export type SaleItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * Filter, which SaleItem to fetch.
   */
  where: Prisma.SaleItemWhereUniqueInput
}

/**
 * SaleItem findFirst
 */
export type SaleItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * Filter, which SaleItem to fetch.
   */
  where?: Prisma.SaleItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleItems to fetch.
   */
  orderBy?: Prisma.SaleItemOrderByWithRelationInput | Prisma.SaleItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SaleItems.
   */
  cursor?: Prisma.SaleItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SaleItems.
   */
  distinct?: Prisma.SaleItemScalarFieldEnum | Prisma.SaleItemScalarFieldEnum[]
}

/**
 * SaleItem findFirstOrThrow
 */
export type SaleItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * Filter, which SaleItem to fetch.
   */
  where?: Prisma.SaleItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleItems to fetch.
   */
  orderBy?: Prisma.SaleItemOrderByWithRelationInput | Prisma.SaleItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SaleItems.
   */
  cursor?: Prisma.SaleItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SaleItems.
   */
  distinct?: Prisma.SaleItemScalarFieldEnum | Prisma.SaleItemScalarFieldEnum[]
}

/**
 * SaleItem findMany
 */
export type SaleItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * Filter, which SaleItems to fetch.
   */
  where?: Prisma.SaleItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleItems to fetch.
   */
  orderBy?: Prisma.SaleItemOrderByWithRelationInput | Prisma.SaleItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SaleItems.
   */
  cursor?: Prisma.SaleItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleItems.
   */
  skip?: number
  distinct?: Prisma.SaleItemScalarFieldEnum | Prisma.SaleItemScalarFieldEnum[]
}

/**
 * SaleItem create
 */
export type SaleItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * The data needed to create a SaleItem.
   */
  data: Prisma.XOR<Prisma.SaleItemCreateInput, Prisma.SaleItemUncheckedCreateInput>
}

/**
 * SaleItem createMany
 */
export type SaleItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SaleItems.
   */
  data: Prisma.SaleItemCreateManyInput | Prisma.SaleItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SaleItem createManyAndReturn
 */
export type SaleItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * The data used to create many SaleItems.
   */
  data: Prisma.SaleItemCreateManyInput | Prisma.SaleItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SaleItem update
 */
export type SaleItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * The data needed to update a SaleItem.
   */
  data: Prisma.XOR<Prisma.SaleItemUpdateInput, Prisma.SaleItemUncheckedUpdateInput>
  /**
   * Choose, which SaleItem to update.
   */
  where: Prisma.SaleItemWhereUniqueInput
}

/**
 * SaleItem updateMany
 */
export type SaleItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SaleItems.
   */
  data: Prisma.XOR<Prisma.SaleItemUpdateManyMutationInput, Prisma.SaleItemUncheckedUpdateManyInput>
  /**
   * Filter which SaleItems to update
   */
  where?: Prisma.SaleItemWhereInput
  /**
   * Limit how many SaleItems to update.
   */
  limit?: number
}

/**
 * SaleItem updateManyAndReturn
 */
export type SaleItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * The data used to update SaleItems.
   */
  data: Prisma.XOR<Prisma.SaleItemUpdateManyMutationInput, Prisma.SaleItemUncheckedUpdateManyInput>
  /**
   * Filter which SaleItems to update
   */
  where?: Prisma.SaleItemWhereInput
  /**
   * Limit how many SaleItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SaleItem upsert
 */
export type SaleItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * The filter to search for the SaleItem to update in case it exists.
   */
  where: Prisma.SaleItemWhereUniqueInput
  /**
   * In case the SaleItem found by the `where` argument doesn't exist, create a new SaleItem with this data.
   */
  create: Prisma.XOR<Prisma.SaleItemCreateInput, Prisma.SaleItemUncheckedCreateInput>
  /**
   * In case the SaleItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SaleItemUpdateInput, Prisma.SaleItemUncheckedUpdateInput>
}

/**
 * SaleItem delete
 */
export type SaleItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  /**
   * Filter which SaleItem to delete.
   */
  where: Prisma.SaleItemWhereUniqueInput
}

/**
 * SaleItem deleteMany
 */
export type SaleItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SaleItems to delete
   */
  where?: Prisma.SaleItemWhereInput
  /**
   * Limit how many SaleItems to delete.
   */
  limit?: number
}

/**
 * SaleItem without action
 */
export type SaleItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
}
