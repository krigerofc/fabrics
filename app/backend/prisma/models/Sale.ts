
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Sale` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Sale
 * 
 */
export type SaleModel = runtime.Types.Result.DefaultSelection<Prisma.$SalePayload>

export type AggregateSale = {
  _count: SaleCountAggregateOutputType | null
  _avg: SaleAvgAggregateOutputType | null
  _sum: SaleSumAggregateOutputType | null
  _min: SaleMinAggregateOutputType | null
  _max: SaleMaxAggregateOutputType | null
}

export type SaleAvgAggregateOutputType = {
  totalAmount: runtime.Decimal | null
}

export type SaleSumAggregateOutputType = {
  totalAmount: runtime.Decimal | null
}

export type SaleMinAggregateOutputType = {
  id: string | null
  saleNumber: string | null
  customerName: string | null
  totalAmount: runtime.Decimal | null
  status: $Enums.SaleStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type SaleMaxAggregateOutputType = {
  id: string | null
  saleNumber: string | null
  customerName: string | null
  totalAmount: runtime.Decimal | null
  status: $Enums.SaleStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type SaleCountAggregateOutputType = {
  id: number
  saleNumber: number
  customerName: number
  totalAmount: number
  status: number
  createdAt: number
  updatedAt: number
  userId: number
  _all: number
}


export type SaleAvgAggregateInputType = {
  totalAmount?: true
}

export type SaleSumAggregateInputType = {
  totalAmount?: true
}

export type SaleMinAggregateInputType = {
  id?: true
  saleNumber?: true
  customerName?: true
  totalAmount?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type SaleMaxAggregateInputType = {
  id?: true
  saleNumber?: true
  customerName?: true
  totalAmount?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type SaleCountAggregateInputType = {
  id?: true
  saleNumber?: true
  customerName?: true
  totalAmount?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  _all?: true
}

export type SaleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sale to aggregate.
   */
  where?: Prisma.SaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SaleOrderByWithRelationInput | Prisma.SaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Sales
  **/
  _count?: true | SaleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SaleAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SaleSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SaleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SaleMaxAggregateInputType
}

export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
      [P in keyof T & keyof AggregateSale]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSale[P]>
    : Prisma.GetScalarType<T[P], AggregateSale[P]>
}




export type SaleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SaleWhereInput
  orderBy?: Prisma.SaleOrderByWithAggregationInput | Prisma.SaleOrderByWithAggregationInput[]
  by: Prisma.SaleScalarFieldEnum[] | Prisma.SaleScalarFieldEnum
  having?: Prisma.SaleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SaleCountAggregateInputType | true
  _avg?: SaleAvgAggregateInputType
  _sum?: SaleSumAggregateInputType
  _min?: SaleMinAggregateInputType
  _max?: SaleMaxAggregateInputType
}

export type SaleGroupByOutputType = {
  id: string
  saleNumber: string
  customerName: string | null
  totalAmount: runtime.Decimal
  status: $Enums.SaleStatus
  createdAt: Date
  updatedAt: Date
  userId: string
  _count: SaleCountAggregateOutputType | null
  _avg: SaleAvgAggregateOutputType | null
  _sum: SaleSumAggregateOutputType | null
  _min: SaleMinAggregateOutputType | null
  _max: SaleMaxAggregateOutputType | null
}

type GetSaleGroupByPayload<T extends SaleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SaleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SaleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SaleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SaleGroupByOutputType[P]>
      }
    >
  >



export type SaleWhereInput = {
  AND?: Prisma.SaleWhereInput | Prisma.SaleWhereInput[]
  OR?: Prisma.SaleWhereInput[]
  NOT?: Prisma.SaleWhereInput | Prisma.SaleWhereInput[]
  id?: Prisma.StringFilter<"Sale"> | string
  saleNumber?: Prisma.StringFilter<"Sale"> | string
  customerName?: Prisma.StringNullableFilter<"Sale"> | string | null
  totalAmount?: Prisma.DecimalFilter<"Sale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFilter<"Sale"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFilter<"Sale"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Sale"> | Date | string
  userId?: Prisma.StringFilter<"Sale"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  items?: Prisma.SaleItemListRelationFilter
  payment?: Prisma.XOR<Prisma.PaymentNullableScalarRelationFilter, Prisma.PaymentWhereInput> | null
}

export type SaleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  saleNumber?: Prisma.SortOrder
  customerName?: Prisma.SortOrderInput | Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  items?: Prisma.SaleItemOrderByRelationAggregateInput
  payment?: Prisma.PaymentOrderByWithRelationInput
}

export type SaleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  saleNumber?: string
  AND?: Prisma.SaleWhereInput | Prisma.SaleWhereInput[]
  OR?: Prisma.SaleWhereInput[]
  NOT?: Prisma.SaleWhereInput | Prisma.SaleWhereInput[]
  customerName?: Prisma.StringNullableFilter<"Sale"> | string | null
  totalAmount?: Prisma.DecimalFilter<"Sale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFilter<"Sale"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFilter<"Sale"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Sale"> | Date | string
  userId?: Prisma.StringFilter<"Sale"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  items?: Prisma.SaleItemListRelationFilter
  payment?: Prisma.XOR<Prisma.PaymentNullableScalarRelationFilter, Prisma.PaymentWhereInput> | null
}, "id" | "saleNumber">

export type SaleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  saleNumber?: Prisma.SortOrder
  customerName?: Prisma.SortOrderInput | Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.SaleCountOrderByAggregateInput
  _avg?: Prisma.SaleAvgOrderByAggregateInput
  _max?: Prisma.SaleMaxOrderByAggregateInput
  _min?: Prisma.SaleMinOrderByAggregateInput
  _sum?: Prisma.SaleSumOrderByAggregateInput
}

export type SaleScalarWhereWithAggregatesInput = {
  AND?: Prisma.SaleScalarWhereWithAggregatesInput | Prisma.SaleScalarWhereWithAggregatesInput[]
  OR?: Prisma.SaleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SaleScalarWhereWithAggregatesInput | Prisma.SaleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Sale"> | string
  saleNumber?: Prisma.StringWithAggregatesFilter<"Sale"> | string
  customerName?: Prisma.StringNullableWithAggregatesFilter<"Sale"> | string | null
  totalAmount?: Prisma.DecimalWithAggregatesFilter<"Sale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusWithAggregatesFilter<"Sale"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Sale"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Sale"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Sale"> | string
}

export type SaleCreateInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSalesInput
  items?: Prisma.SaleItemCreateNestedManyWithoutSaleInput
  payment?: Prisma.PaymentCreateNestedOneWithoutSaleInput
}

export type SaleUncheckedCreateInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  items?: Prisma.SaleItemUncheckedCreateNestedManyWithoutSaleInput
  payment?: Prisma.PaymentUncheckedCreateNestedOneWithoutSaleInput
}

export type SaleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSalesNestedInput
  items?: Prisma.SaleItemUpdateManyWithoutSaleNestedInput
  payment?: Prisma.PaymentUpdateOneWithoutSaleNestedInput
}

export type SaleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  items?: Prisma.SaleItemUncheckedUpdateManyWithoutSaleNestedInput
  payment?: Prisma.PaymentUncheckedUpdateOneWithoutSaleNestedInput
}

export type SaleCreateManyInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type SaleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SaleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SaleListRelationFilter = {
  every?: Prisma.SaleWhereInput
  some?: Prisma.SaleWhereInput
  none?: Prisma.SaleWhereInput
}

export type SaleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SaleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleNumber?: Prisma.SortOrder
  customerName?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SaleAvgOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
}

export type SaleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleNumber?: Prisma.SortOrder
  customerName?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SaleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleNumber?: Prisma.SortOrder
  customerName?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SaleSumOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
}

export type SaleScalarRelationFilter = {
  is?: Prisma.SaleWhereInput
  isNot?: Prisma.SaleWhereInput
}

export type SaleCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutUserInput, Prisma.SaleUncheckedCreateWithoutUserInput> | Prisma.SaleCreateWithoutUserInput[] | Prisma.SaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutUserInput | Prisma.SaleCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SaleCreateManyUserInputEnvelope
  connect?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
}

export type SaleUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutUserInput, Prisma.SaleUncheckedCreateWithoutUserInput> | Prisma.SaleCreateWithoutUserInput[] | Prisma.SaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutUserInput | Prisma.SaleCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SaleCreateManyUserInputEnvelope
  connect?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
}

export type SaleUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutUserInput, Prisma.SaleUncheckedCreateWithoutUserInput> | Prisma.SaleCreateWithoutUserInput[] | Prisma.SaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutUserInput | Prisma.SaleCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SaleUpsertWithWhereUniqueWithoutUserInput | Prisma.SaleUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SaleCreateManyUserInputEnvelope
  set?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  disconnect?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  delete?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  connect?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  update?: Prisma.SaleUpdateWithWhereUniqueWithoutUserInput | Prisma.SaleUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SaleUpdateManyWithWhereWithoutUserInput | Prisma.SaleUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SaleScalarWhereInput | Prisma.SaleScalarWhereInput[]
}

export type SaleUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutUserInput, Prisma.SaleUncheckedCreateWithoutUserInput> | Prisma.SaleCreateWithoutUserInput[] | Prisma.SaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutUserInput | Prisma.SaleCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SaleUpsertWithWhereUniqueWithoutUserInput | Prisma.SaleUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SaleCreateManyUserInputEnvelope
  set?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  disconnect?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  delete?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  connect?: Prisma.SaleWhereUniqueInput | Prisma.SaleWhereUniqueInput[]
  update?: Prisma.SaleUpdateWithWhereUniqueWithoutUserInput | Prisma.SaleUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SaleUpdateManyWithWhereWithoutUserInput | Prisma.SaleUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SaleScalarWhereInput | Prisma.SaleScalarWhereInput[]
}

export type EnumSaleStatusFieldUpdateOperationsInput = {
  set?: $Enums.SaleStatus
}

export type SaleCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutItemsInput, Prisma.SaleUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutItemsInput
  connect?: Prisma.SaleWhereUniqueInput
}

export type SaleUpdateOneRequiredWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutItemsInput, Prisma.SaleUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutItemsInput
  upsert?: Prisma.SaleUpsertWithoutItemsInput
  connect?: Prisma.SaleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SaleUpdateToOneWithWhereWithoutItemsInput, Prisma.SaleUpdateWithoutItemsInput>, Prisma.SaleUncheckedUpdateWithoutItemsInput>
}

export type SaleCreateNestedOneWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutPaymentInput, Prisma.SaleUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutPaymentInput
  connect?: Prisma.SaleWhereUniqueInput
}

export type SaleUpdateOneRequiredWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.SaleCreateWithoutPaymentInput, Prisma.SaleUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.SaleCreateOrConnectWithoutPaymentInput
  upsert?: Prisma.SaleUpsertWithoutPaymentInput
  connect?: Prisma.SaleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SaleUpdateToOneWithWhereWithoutPaymentInput, Prisma.SaleUpdateWithoutPaymentInput>, Prisma.SaleUncheckedUpdateWithoutPaymentInput>
}

export type SaleCreateWithoutUserInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.SaleItemCreateNestedManyWithoutSaleInput
  payment?: Prisma.PaymentCreateNestedOneWithoutSaleInput
}

export type SaleUncheckedCreateWithoutUserInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.SaleItemUncheckedCreateNestedManyWithoutSaleInput
  payment?: Prisma.PaymentUncheckedCreateNestedOneWithoutSaleInput
}

export type SaleCreateOrConnectWithoutUserInput = {
  where: Prisma.SaleWhereUniqueInput
  create: Prisma.XOR<Prisma.SaleCreateWithoutUserInput, Prisma.SaleUncheckedCreateWithoutUserInput>
}

export type SaleCreateManyUserInputEnvelope = {
  data: Prisma.SaleCreateManyUserInput | Prisma.SaleCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type SaleUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SaleWhereUniqueInput
  update: Prisma.XOR<Prisma.SaleUpdateWithoutUserInput, Prisma.SaleUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SaleCreateWithoutUserInput, Prisma.SaleUncheckedCreateWithoutUserInput>
}

export type SaleUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SaleWhereUniqueInput
  data: Prisma.XOR<Prisma.SaleUpdateWithoutUserInput, Prisma.SaleUncheckedUpdateWithoutUserInput>
}

export type SaleUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SaleScalarWhereInput
  data: Prisma.XOR<Prisma.SaleUpdateManyMutationInput, Prisma.SaleUncheckedUpdateManyWithoutUserInput>
}

export type SaleScalarWhereInput = {
  AND?: Prisma.SaleScalarWhereInput | Prisma.SaleScalarWhereInput[]
  OR?: Prisma.SaleScalarWhereInput[]
  NOT?: Prisma.SaleScalarWhereInput | Prisma.SaleScalarWhereInput[]
  id?: Prisma.StringFilter<"Sale"> | string
  saleNumber?: Prisma.StringFilter<"Sale"> | string
  customerName?: Prisma.StringNullableFilter<"Sale"> | string | null
  totalAmount?: Prisma.DecimalFilter<"Sale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFilter<"Sale"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFilter<"Sale"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Sale"> | Date | string
  userId?: Prisma.StringFilter<"Sale"> | string
}

export type SaleCreateWithoutItemsInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSalesInput
  payment?: Prisma.PaymentCreateNestedOneWithoutSaleInput
}

export type SaleUncheckedCreateWithoutItemsInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  payment?: Prisma.PaymentUncheckedCreateNestedOneWithoutSaleInput
}

export type SaleCreateOrConnectWithoutItemsInput = {
  where: Prisma.SaleWhereUniqueInput
  create: Prisma.XOR<Prisma.SaleCreateWithoutItemsInput, Prisma.SaleUncheckedCreateWithoutItemsInput>
}

export type SaleUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.SaleUpdateWithoutItemsInput, Prisma.SaleUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.SaleCreateWithoutItemsInput, Prisma.SaleUncheckedCreateWithoutItemsInput>
  where?: Prisma.SaleWhereInput
}

export type SaleUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.SaleWhereInput
  data: Prisma.XOR<Prisma.SaleUpdateWithoutItemsInput, Prisma.SaleUncheckedUpdateWithoutItemsInput>
}

export type SaleUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSalesNestedInput
  payment?: Prisma.PaymentUpdateOneWithoutSaleNestedInput
}

export type SaleUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  payment?: Prisma.PaymentUncheckedUpdateOneWithoutSaleNestedInput
}

export type SaleCreateWithoutPaymentInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSalesInput
  items?: Prisma.SaleItemCreateNestedManyWithoutSaleInput
}

export type SaleUncheckedCreateWithoutPaymentInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  items?: Prisma.SaleItemUncheckedCreateNestedManyWithoutSaleInput
}

export type SaleCreateOrConnectWithoutPaymentInput = {
  where: Prisma.SaleWhereUniqueInput
  create: Prisma.XOR<Prisma.SaleCreateWithoutPaymentInput, Prisma.SaleUncheckedCreateWithoutPaymentInput>
}

export type SaleUpsertWithoutPaymentInput = {
  update: Prisma.XOR<Prisma.SaleUpdateWithoutPaymentInput, Prisma.SaleUncheckedUpdateWithoutPaymentInput>
  create: Prisma.XOR<Prisma.SaleCreateWithoutPaymentInput, Prisma.SaleUncheckedCreateWithoutPaymentInput>
  where?: Prisma.SaleWhereInput
}

export type SaleUpdateToOneWithWhereWithoutPaymentInput = {
  where?: Prisma.SaleWhereInput
  data: Prisma.XOR<Prisma.SaleUpdateWithoutPaymentInput, Prisma.SaleUncheckedUpdateWithoutPaymentInput>
}

export type SaleUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSalesNestedInput
  items?: Prisma.SaleItemUpdateManyWithoutSaleNestedInput
}

export type SaleUncheckedUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  items?: Prisma.SaleItemUncheckedUpdateManyWithoutSaleNestedInput
}

export type SaleCreateManyUserInput = {
  id?: string
  saleNumber: string
  customerName?: string | null
  totalAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SaleUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.SaleItemUpdateManyWithoutSaleNestedInput
  payment?: Prisma.PaymentUpdateOneWithoutSaleNestedInput
}

export type SaleUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.SaleItemUncheckedUpdateManyWithoutSaleNestedInput
  payment?: Prisma.PaymentUncheckedUpdateOneWithoutSaleNestedInput
}

export type SaleUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleNumber?: Prisma.StringFieldUpdateOperationsInput | string
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SaleCountOutputType
 */

export type SaleCountOutputType = {
  items: number
}

export type SaleCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | SaleCountOutputTypeCountItemsArgs
}

/**
 * SaleCountOutputType without action
 */
export type SaleCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleCountOutputType
   */
  select?: Prisma.SaleCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SaleCountOutputType without action
 */
export type SaleCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SaleItemWhereInput
}


export type SaleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleNumber?: boolean
  customerName?: boolean
  totalAmount?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  items?: boolean | Prisma.Sale$itemsArgs<ExtArgs>
  payment?: boolean | Prisma.Sale$paymentArgs<ExtArgs>
  _count?: boolean | Prisma.SaleCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sale"]>

export type SaleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleNumber?: boolean
  customerName?: boolean
  totalAmount?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sale"]>

export type SaleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleNumber?: boolean
  customerName?: boolean
  totalAmount?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sale"]>

export type SaleSelectScalar = {
  id?: boolean
  saleNumber?: boolean
  customerName?: boolean
  totalAmount?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
}

export type SaleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "saleNumber" | "customerName" | "totalAmount" | "status" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["sale"]>
export type SaleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  items?: boolean | Prisma.Sale$itemsArgs<ExtArgs>
  payment?: boolean | Prisma.Sale$paymentArgs<ExtArgs>
  _count?: boolean | Prisma.SaleCountOutputTypeDefaultArgs<ExtArgs>
}
export type SaleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type SaleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $SalePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Sale"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    items: Prisma.$SaleItemPayload<ExtArgs>[]
    payment: Prisma.$PaymentPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    saleNumber: string
    customerName: string | null
    totalAmount: runtime.Decimal
    status: $Enums.SaleStatus
    createdAt: Date
    updatedAt: Date
    userId: string
  }, ExtArgs["result"]["sale"]>
  composites: {}
}

export type SaleGetPayload<S extends boolean | null | undefined | SaleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SalePayload, S>

export type SaleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SaleCountAggregateInputType | true
  }

export interface SaleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sale'], meta: { name: 'Sale' } }
  /**
   * Find zero or one Sale that matches the filter.
   * @param {SaleFindUniqueArgs} args - Arguments to find a Sale
   * @example
   * // Get one Sale
   * const sale = await prisma.sale.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SaleFindUniqueArgs>(args: Prisma.SelectSubset<T, SaleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Sale that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SaleFindUniqueOrThrowArgs} args - Arguments to find a Sale
   * @example
   * // Get one Sale
   * const sale = await prisma.sale.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SaleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sale that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleFindFirstArgs} args - Arguments to find a Sale
   * @example
   * // Get one Sale
   * const sale = await prisma.sale.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SaleFindFirstArgs>(args?: Prisma.SelectSubset<T, SaleFindFirstArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sale that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleFindFirstOrThrowArgs} args - Arguments to find a Sale
   * @example
   * // Get one Sale
   * const sale = await prisma.sale.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SaleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SaleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Sales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sales
   * const sales = await prisma.sale.findMany()
   * 
   * // Get first 10 Sales
   * const sales = await prisma.sale.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const saleWithIdOnly = await prisma.sale.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SaleFindManyArgs>(args?: Prisma.SelectSubset<T, SaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Sale.
   * @param {SaleCreateArgs} args - Arguments to create a Sale.
   * @example
   * // Create one Sale
   * const Sale = await prisma.sale.create({
   *   data: {
   *     // ... data to create a Sale
   *   }
   * })
   * 
   */
  create<T extends SaleCreateArgs>(args: Prisma.SelectSubset<T, SaleCreateArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Sales.
   * @param {SaleCreateManyArgs} args - Arguments to create many Sales.
   * @example
   * // Create many Sales
   * const sale = await prisma.sale.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SaleCreateManyArgs>(args?: Prisma.SelectSubset<T, SaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Sales and returns the data saved in the database.
   * @param {SaleCreateManyAndReturnArgs} args - Arguments to create many Sales.
   * @example
   * // Create many Sales
   * const sale = await prisma.sale.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Sales and only return the `id`
   * const saleWithIdOnly = await prisma.sale.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SaleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Sale.
   * @param {SaleDeleteArgs} args - Arguments to delete one Sale.
   * @example
   * // Delete one Sale
   * const Sale = await prisma.sale.delete({
   *   where: {
   *     // ... filter to delete one Sale
   *   }
   * })
   * 
   */
  delete<T extends SaleDeleteArgs>(args: Prisma.SelectSubset<T, SaleDeleteArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Sale.
   * @param {SaleUpdateArgs} args - Arguments to update one Sale.
   * @example
   * // Update one Sale
   * const sale = await prisma.sale.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SaleUpdateArgs>(args: Prisma.SelectSubset<T, SaleUpdateArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Sales.
   * @param {SaleDeleteManyArgs} args - Arguments to filter Sales to delete.
   * @example
   * // Delete a few Sales
   * const { count } = await prisma.sale.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SaleDeleteManyArgs>(args?: Prisma.SelectSubset<T, SaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sales
   * const sale = await prisma.sale.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SaleUpdateManyArgs>(args: Prisma.SelectSubset<T, SaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sales and returns the data updated in the database.
   * @param {SaleUpdateManyAndReturnArgs} args - Arguments to update many Sales.
   * @example
   * // Update many Sales
   * const sale = await prisma.sale.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Sales and only return the `id`
   * const saleWithIdOnly = await prisma.sale.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SaleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SaleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Sale.
   * @param {SaleUpsertArgs} args - Arguments to update or create a Sale.
   * @example
   * // Update or create a Sale
   * const sale = await prisma.sale.upsert({
   *   create: {
   *     // ... data to create a Sale
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Sale we want to update
   *   }
   * })
   */
  upsert<T extends SaleUpsertArgs>(args: Prisma.SelectSubset<T, SaleUpsertArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleCountArgs} args - Arguments to filter Sales to count.
   * @example
   * // Count the number of Sales
   * const count = await prisma.sale.count({
   *   where: {
   *     // ... the filter for the Sales we want to count
   *   }
   * })
  **/
  count<T extends SaleCountArgs>(
    args?: Prisma.Subset<T, SaleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SaleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Sale.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SaleAggregateArgs>(args: Prisma.Subset<T, SaleAggregateArgs>): Prisma.PrismaPromise<GetSaleAggregateType<T>>

  /**
   * Group by Sale.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SaleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SaleGroupByArgs['orderBy'] }
      : { orderBy?: SaleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Sale model
 */
readonly fields: SaleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Sale.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SaleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  items<T extends Prisma.Sale$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Sale$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  payment<T extends Prisma.Sale$paymentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Sale$paymentArgs<ExtArgs>>): Prisma.Prisma__PaymentClient<runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Sale model
 */
export interface SaleFieldRefs {
  readonly id: Prisma.FieldRef<"Sale", 'String'>
  readonly saleNumber: Prisma.FieldRef<"Sale", 'String'>
  readonly customerName: Prisma.FieldRef<"Sale", 'String'>
  readonly totalAmount: Prisma.FieldRef<"Sale", 'Decimal'>
  readonly status: Prisma.FieldRef<"Sale", 'SaleStatus'>
  readonly createdAt: Prisma.FieldRef<"Sale", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Sale", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Sale", 'String'>
}
    

// Custom InputTypes
/**
 * Sale findUnique
 */
export type SaleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * Filter, which Sale to fetch.
   */
  where: Prisma.SaleWhereUniqueInput
}

/**
 * Sale findUniqueOrThrow
 */
export type SaleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * Filter, which Sale to fetch.
   */
  where: Prisma.SaleWhereUniqueInput
}

/**
 * Sale findFirst
 */
export type SaleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * Filter, which Sale to fetch.
   */
  where?: Prisma.SaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SaleOrderByWithRelationInput | Prisma.SaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sales.
   */
  cursor?: Prisma.SaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sales.
   */
  distinct?: Prisma.SaleScalarFieldEnum | Prisma.SaleScalarFieldEnum[]
}

/**
 * Sale findFirstOrThrow
 */
export type SaleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * Filter, which Sale to fetch.
   */
  where?: Prisma.SaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SaleOrderByWithRelationInput | Prisma.SaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sales.
   */
  cursor?: Prisma.SaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sales.
   */
  distinct?: Prisma.SaleScalarFieldEnum | Prisma.SaleScalarFieldEnum[]
}

/**
 * Sale findMany
 */
export type SaleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * Filter, which Sales to fetch.
   */
  where?: Prisma.SaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SaleOrderByWithRelationInput | Prisma.SaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Sales.
   */
  cursor?: Prisma.SaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  distinct?: Prisma.SaleScalarFieldEnum | Prisma.SaleScalarFieldEnum[]
}

/**
 * Sale create
 */
export type SaleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * The data needed to create a Sale.
   */
  data: Prisma.XOR<Prisma.SaleCreateInput, Prisma.SaleUncheckedCreateInput>
}

/**
 * Sale createMany
 */
export type SaleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Sales.
   */
  data: Prisma.SaleCreateManyInput | Prisma.SaleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Sale createManyAndReturn
 */
export type SaleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * The data used to create many Sales.
   */
  data: Prisma.SaleCreateManyInput | Prisma.SaleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Sale update
 */
export type SaleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * The data needed to update a Sale.
   */
  data: Prisma.XOR<Prisma.SaleUpdateInput, Prisma.SaleUncheckedUpdateInput>
  /**
   * Choose, which Sale to update.
   */
  where: Prisma.SaleWhereUniqueInput
}

/**
 * Sale updateMany
 */
export type SaleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Sales.
   */
  data: Prisma.XOR<Prisma.SaleUpdateManyMutationInput, Prisma.SaleUncheckedUpdateManyInput>
  /**
   * Filter which Sales to update
   */
  where?: Prisma.SaleWhereInput
  /**
   * Limit how many Sales to update.
   */
  limit?: number
}

/**
 * Sale updateManyAndReturn
 */
export type SaleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * The data used to update Sales.
   */
  data: Prisma.XOR<Prisma.SaleUpdateManyMutationInput, Prisma.SaleUncheckedUpdateManyInput>
  /**
   * Filter which Sales to update
   */
  where?: Prisma.SaleWhereInput
  /**
   * Limit how many Sales to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Sale upsert
 */
export type SaleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * The filter to search for the Sale to update in case it exists.
   */
  where: Prisma.SaleWhereUniqueInput
  /**
   * In case the Sale found by the `where` argument doesn't exist, create a new Sale with this data.
   */
  create: Prisma.XOR<Prisma.SaleCreateInput, Prisma.SaleUncheckedCreateInput>
  /**
   * In case the Sale was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SaleUpdateInput, Prisma.SaleUncheckedUpdateInput>
}

/**
 * Sale delete
 */
export type SaleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  /**
   * Filter which Sale to delete.
   */
  where: Prisma.SaleWhereUniqueInput
}

/**
 * Sale deleteMany
 */
export type SaleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sales to delete
   */
  where?: Prisma.SaleWhereInput
  /**
   * Limit how many Sales to delete.
   */
  limit?: number
}

/**
 * Sale.items
 */
export type Sale$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleItem
   */
  select?: Prisma.SaleItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleItem
   */
  omit?: Prisma.SaleItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleItemInclude<ExtArgs> | null
  where?: Prisma.SaleItemWhereInput
  orderBy?: Prisma.SaleItemOrderByWithRelationInput | Prisma.SaleItemOrderByWithRelationInput[]
  cursor?: Prisma.SaleItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SaleItemScalarFieldEnum | Prisma.SaleItemScalarFieldEnum[]
}

/**
 * Sale.payment
 */
export type Sale$paymentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Payment
   */
  select?: Prisma.PaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Payment
   */
  omit?: Prisma.PaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInclude<ExtArgs> | null
  where?: Prisma.PaymentWhereInput
}

/**
 * Sale without action
 */
export type SaleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
}
